{"version":3,"names":["React","Component","requireNativeComponent","RCTRtcSurfaceView","RtcSurfaceView","render","channelId","uid","others","props","RCTRtcTextureView","RtcTextureView"],"sources":["RtcRenderView.native.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { requireNativeComponent, ViewProps } from 'react-native';\n\nimport type { VideoMirrorMode, VideoRenderMode } from './Enums';\n\n/**\n * Properties of the uid.\n */\nexport interface RtcUidProps {\n  /** User ID. */\n  uid: number;\n}\n\n/**\n * Properties of the SurfaceView.\n */\nexport interface RtcSurfaceViewProps {\n  /**\n   * Controls whether the SurfaceView's surface is placed on top of another\n   * regular surface view in the window (but still behind the window itself).\n   */\n  zOrderMediaOverlay?: boolean;\n  /**\n   * Controls whether the SurfaceView's surface is placed on top of its window.\n   */\n  zOrderOnTop?: boolean;\n  /**\n   * The rendering mode of the video view.\n   */\n  renderMode?: VideoRenderMode;\n  /**\n   * The unique channel name for the AgoraRTC session in the string format.\n   * The string length must be less than 64 bytes. Supported character scopes are:\n   * - All lowercase English letters: a to z.\n   * - All uppercase English letters: A to Z.\n   * - All numeric characters: 0 to 9.\n   * - The space character.\n   * - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n   *\n   * **Note**\n   * - The default value is the empty string \"\". Use the default value if the user joins the channel using the [`joinChannel`]{@link RtcEngine.joinChannel} method in the `RtcEngine` class.\n   * - If the user joins the channel using the [`joinChannel`]{@link RtcChannel.joinChannel} method in the `RtcChannel` class, set this parameter as the `channelId` of the `RtcChannel` object.\n   */\n  channelId?: string;\n  /** The video mirror mode. */\n  mirrorMode?: VideoMirrorMode;\n}\n\n/**\n * Properties of the TextureView.\n */\nexport interface RtcTextureViewProps {\n  /**\n   * The rendering mode of the video view.\n   */\n  renderMode?: VideoRenderMode;\n  /**\n   * The unique channel name for the AgoraRTC session in the string format.\n   * The string length must be less than 64 bytes. Supported character scopes are:\n   * - All lowercase English letters: a to z.\n   * - All uppercase English letters: A to Z.\n   * - All numeric characters: 0 to 9.\n   * - The space character.\n   * - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n   *\n   * **Note**\n   * - The default value is the empty string \"\". Use the default value if the user joins the channel using the [`joinChannel`]{@link RtcEngine.joinChannel} method in the `RtcEngine` class.\n   * - If the user joins the channel using the [`joinChannel`]{@link RtcChannel.joinChannel} method in the `RtcChannel` class, set this parameter as the `channelId` of the `RtcChannel` object.\n   */\n  channelId?: string;\n  /** The video mirror mode. */\n  mirrorMode?: VideoMirrorMode;\n}\n\ninterface RtcRenderViewProps {\n  data: { channelId?: string; uid: number };\n}\n\n/**\n * @ignore\n */\nconst RCTRtcSurfaceView = requireNativeComponent<RtcRenderViewProps>(\n  'RCTAgoraRtcSurfaceView'\n);\n\n/**\n * @ignore\n */\nexport class RtcSurfaceView extends Component<\n  ViewProps & RtcSurfaceViewProps & RtcUidProps,\n  {}\n> {\n  render() {\n    const { channelId, uid, ...others } = this.props;\n    return <RCTRtcSurfaceView data={{ channelId, uid }} {...others} />;\n  }\n}\n\n/**\n * @ignore\n */\nconst RCTRtcTextureView = requireNativeComponent<RtcRenderViewProps>(\n  'RCTAgoraRtcTextureView'\n);\n\n/**\n * @ignore\n */\nexport class RtcTextureView extends Component<\n  ViewProps & RtcTextureViewProps & RtcUidProps,\n  {}\n> {\n  render() {\n    const { channelId, uid, ...others } = this.props;\n    return <RCTRtcTextureView data={{ channelId, uid }} {...others} />;\n  }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,sBAAsB,QAAmB,cAAc;AA6EhE;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGD,sBAAsB,CAC9C,wBAAwB,CACzB;;AAED;AACA;AACA;AACA,OAAO,MAAME,cAAc,SAASH,SAAS,CAG3C;EACAI,MAAM,GAAG;IACP,MAAM;MAAEC,SAAS;MAAEC,GAAG;MAAE,GAAGC;IAAO,CAAC,GAAG,IAAI,CAACC,KAAK;IAChD,oBAAO,oBAAC,iBAAiB;MAAC,IAAI,EAAE;QAAEH,SAAS;QAAEC;MAAI;IAAE,GAAKC,MAAM,EAAI;EACpE;AACF;;AAEA;AACA;AACA;AACA,MAAME,iBAAiB,GAAGR,sBAAsB,CAC9C,wBAAwB,CACzB;;AAED;AACA;AACA;AACA,OAAO,MAAMS,cAAc,SAASV,SAAS,CAG3C;EACAI,MAAM,GAAG;IACP,MAAM;MAAEC,SAAS;MAAEC,GAAG;MAAE,GAAGC;IAAO,CAAC,GAAG,IAAI,CAACC,KAAK;IAChD,oBAAO,oBAAC,iBAAiB;MAAC,IAAI,EAAE;QAAEH,SAAS;QAAEC;MAAI;IAAE,GAAKC,MAAM,EAAI;EACpE;AACF"}